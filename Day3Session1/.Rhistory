fit1 <- osmasem(model.name="Pub as a moderator", RAM=RAM1, Ax=A1, data=Nohe.df)
summary(fit1)
## Comparing the models with and without Pub
anova(fit1, fit0)
## Get beta0 of the unpublished studies
mxEval(A0, fit1$mx.fit)
## Get beta1 of the published studies
mxEval(A1-A0, fit1$mx.fit)
## Get beta1 of the published studies
mxEval(A0+A1, fit1$mx.fit)
## beta1: coefficients of published - unpublished
mxEval(A1, fit1$mx.fit)
## beta0: coefficients of the unpublished studies
mxEval(A0, fit1$mx.fit)
## beta0: coefficients of the unpublished studies
mxSE(A0, fit1$mx.fit)
## Standardize the moderator "Lag" to improve numerical stability and add it into the dataframe
Nohe.df$data$Lag <- scale(df$Lag)
head(Nohe.df$data)
hist(df$Lag)
hist(df$Lag, breaks=10)
df$Lag
hist(df$Lag, breaks=15)
hist(df$Lag, breaks=15, xlab="Months")
## Standardize the moderator "Lag" to improve numerical stability and add it into the dataframe
Nohe.df$data$Lag <- scale(df$Lag)
head(Nohe.df$data)
A2 <- create.modMatrix(RAM=RAM3, output="A", mod="Lag")
A2
## Fit the model with Lag as a moderator
fit2 <- osmasem(model.name="Lag as a moderator", RAM=RAM1, Ax=A2, data=Nohe.df)
summary(fit2)
## Comparing the models with and without the covariate
anova(fit2, fit0)
## Effect of w2w when Lag is at the mean value
mxEval(w2w, fit1$mx.fit)
## Effect of w2w when Lag is at the mean value
mxEval(w2w, fit1$mx.fit)
## Effect of w2w when Lag is at +1 SD as Lag is standardized
mxEval(w2w + w2w_1, fit1$mx.fit)
## Effect of w2w when Lag is at -1 SD as Lag is standardized
mxEval(w2w - w2w_1, fit1$mx.fit)
## Effect of w2w when Lag is at -1 SD as Lag is standardized
mxEval(w2w - w2w_1, fit2$mx.fit)
## Effect of w2w when Lag is at the mean value
mxEval(w2w, fit2$mx.fit)
## Effect of w2w when Lag is at +1 SD as Lag is standardized
mxEval(w2w + w2w_1, fit2$mx.fit)
## Effect of w2w when Lag is at the mean value
M <- mxEval(w2w, fit2$mx.fit)
## Effect of w2w when Lag is at the mean value
Mean <- mxEval(w2w, fit2$mx.fit)
Mean
## Effect of w2w when Lag is at the mean value
Mean <- c(mxEval(w2w, fit2$mx.fit))
Mean
## Effect of w2w when Lag is at +1 SD as Lag is standardized
PlusSD <- mxEval(w2w + w2w_1, fit2$mx.fit)
PlusSD
## Effect of w2w when Lag is at the mean value
Mean <- mxEval(w2w, fit2$mx.fit))
Mean
## Effect of w2w when Lag is at the mean value
Mean <- mxEval(w2w, fit2$mx.fit)
Mean
## Effect of w2w when Lag is at +1 SD as Lag is standardized
PlusSD <- mxEval(w2w + w2w_1, fit2$mx.fit
## Effect of w2w when Lag is at -1 SD as Lag is standardized
mxEval(w2w - w2w_1, fit2$mx.fit)
## Effect of w2w when Lag is at +1 SD as Lag is standardized
PlusSD <- mxEval(w2w + w2w_1, fit2$mx.fit)
PlusSD
## Effect of w2w when Lag is at -1 SD as Lag is standardized
MinSD <- mxEval(w2w - w2w_1, fit2$mx.fit)
MinSD
?abline
abline(a=c(0,0), b=c(2,3))
d=data.frame(slope=c(MinSD, Mean, PlusSD), intercept=c(0,0,0))
d
ggplot() +
scale_x_continuous(name="x", limits=c(-2, 2)) +
scale_y_continuous(name="y", limits=c(-1, 1)) +
scale_linetype(name="s") +
geom_abline(data=d, mapping=aes(slope=s, intercept=ic, linetype=factor(s))) +
opts(title="geom_abline", plot.title=theme_text(size=40, vjust=1.5))
library(ggplot2)
ggplot() +
scale_x_continuous(name="x", limits=c(-2, 2)) +
scale_y_continuous(name="y", limits=c(-1, 1)) +
scale_linetype(name="s") +
geom_abline(data=d, mapping=aes(slope=s, intercept=ic, linetype=factor(s))) +
opts(title="geom_abline", plot.title=theme_text(size=40, vjust=1.5))
ggplot() +
scale_x_continuous(name="x", limits=c(-2, 2)) +
scale_y_continuous(name="y", limits=c(-1, 1)) +
scale_linetype(name="s") +
geom_abline(data=d, mapping=aes(slope=s, intercept=ic, linetype=factor(s)))
ggplot() +
scale_x_continuous(name="x", limits=c(-2, 2)) +
scale_y_continuous(name="y", limits=c(-1, 1)) +
scale_linetype(name="s") +
geom_abline(data=d, mapping=aes(slope=slope, intercept=intercept, linetype=factor(s)))
ggplot() +
scale_x_continuous(name="x", limits=c(-2, 2)) +
scale_y_continuous(name="y", limits=c(-1, 1)) +
scale_linetype(name="s") +
geom_abline(data=d, mapping=aes(slope=slope, intercept=intercept, linetype=factor(s)))
ggplot() +
scale_x_continuous(name="x", limits=c(-2, 2)) +
scale_y_continuous(name="y", limits=c(-1, 1)) +
scale_linetype(name="s") +
geom_abline(data=d, mapping=aes(slope=slope, intercept=intercept, linetype=factor(slope)))
ggplot() +
scale_x_continuous(name="x", limits=c(-2, 2)) +
scale_y_continuous(name="y", limits=c(-1, 1)) +
scale_linetype(name="s") +
geom_abline(data=d, mapping=aes(slope=slope, intercept=intercept, col=factor(slope)))
ggplot() +
scale_x_continuous(name="x", limits=c(-2, 2)) +
scale_y_continuous(name="y", limits=c(-1, 1)) +
scale_linetype(name="slope") +
geom_abline(data=d, mapping=aes(slope=slope, intercept=intercept, col=factor(slope)))
ggplot() +
scale_x_continuous(name="x", limits=c(-1, 1)) +
scale_y_continuous(name="y", limits=c(-1, 1)) +
scale_linetype(name="slope") +
geom_abline(data=d, mapping=aes(slope=slope, intercept=intercept, col=factor(slope)))
ggplot() +
scale_x_continuous(name="x", limits=c(-1, 1)) +
scale_y_continuous(name="y", limits=c(-1, 1)) +
scale_linetype(name="slope") +
geom_abline(data=d, mapping=aes(slope=slope, intercept=intercept, linetype=factor(slope), col=factor(slope)))
ggplot() +
scale_x_continuous(name="x", limits=c(-1, 1)) +
scale_y_continuous(name="y", limits=c(-1, 1)) +
# scale_linetype(name="slope") +
geom_abline(data=d, mapping=aes(slope=slope, intercept=intercept, linetype=factor(slope), col=factor(slope)))
ggplot() +
scale_x_continuous(name="x", limits=c(-1, 1)) +
scale_y_continuous(name="y", limits=c(-1, 1)) +
# scale_linetype(name="slope") +
geom_abline(data=d, mapping=aes(slope=slope, intercept=intercept, linetype=factor(slope), col=factor(slope))) +
scale_fill_discrete(labels="-1SD", "Mean", "+1SD")
ggplot() +
scale_x_continuous(name="W1", limits=c(-1, 1)) +
scale_y_continuous(name="W2", limits=c(-1, 1)) +
# scale_linetype(name="slope") +
geom_abline(data=d, mapping=aes(slope=slope, intercept=intercept, linetype=factor(slope), col=factor(slope))) +
scale_fill_discrete(labels="-1SD", "Mean", "+1SD")
?scale_fill_discrete
ggplot() +
scale_x_continuous(name="W1", limits=c(-1, 1)) +
scale_y_continuous(name="W2", limits=c(-1, 1)) +
# scale_linetype(name="slope") +
geom_abline(data=d, mapping=aes(slope=slope, intercept=intercept, linetype=factor(slope), col=factor(slope))) +
scale_fill_discrete(breaks="-1SD", "Mean", "+1SD")
ggplot() +
scale_x_continuous(name="W1", limits=c(-1, 1)) +
scale_y_continuous(name="W2", limits=c(-1, 1)) +
# scale_linetype(name="slope") +
geom_abline(data=d, mapping=aes(slope=slope, intercept=intercept, linetype=factor(slope), col=factor(slope))) +
guides(fill=FALSE)
ggplot() +
scale_x_continuous(name="W1", limits=c(-1, 1)) +
scale_y_continuous(name="W2", limits=c(-1, 1)) +
# scale_linetype(name="slope") +
geom_abline(data=d, mapping=aes(slope=slope, intercept=intercept, linetype=factor(slope), col=factor(slope))) +
guides(fill="none")
ggplot() +
scale_x_continuous(name="W1", limits=c(-1, 1)) +
scale_y_continuous(name="W2", limits=c(-1, 1)) +
# scale_linetype(name="slope") +
geom_abline(data=d, mapping=aes(slope=slope, intercept=intercept, linetype=factor(slope), col=factor(slope))) +
scale_shape_identity(labels="-1SD", "Mean", "+1SD")
ggplot() +
scale_x_continuous(name="W1", limits=c(-1, 1)) +
scale_y_continuous(name="W2", limits=c(-1, 1)) +
# scale_linetype(name="slope") +
geom_abline(data=d, mapping=aes(slope=slope, intercept=intercept, linetype=factor(slope), col=factor(slope))) +
scale_shape_identity(labels="-1SD", "Mean", "+1SD", breaks="-1SD", "Mean", "+1SD")
ggplot() +
scale_x_continuous(name="W1", limits=c(-1, 1)) +
scale_y_continuous(name="W2", limits=c(-1, 1)) +
# scale_linetype(name="slope") +
geom_abline(data=d, mapping=aes(slope=slope, intercept=intercept, linetype=factor(slope), col=factor(slope)), show_guide=TRUE)
ggplot() +
scale_x_continuous(name="W1", limits=c(-1, 1)) +
scale_y_continuous(name="W2", limits=c(-1, 1)) +
# scale_linetype(name="slope") +
geom_abline(data=d, mapping=aes(slope=slope, intercept=intercept, linetype=factor(slope), col=factor(slope)), show.legend = TRUE)
plot(x=NULL, y=NULL, xlim=c(-1,1), ylim=c(-1,1))
plot(x=NULL, y=NULL, xlim=c(-1,1), ylim=c(-1,1), xlab="W1")
plot(x=NULL, y=NULL, xlim=c(-1,1), ylim=c(-1,1), xlab="W1", ylab="W2")
abline(a=c(0,0,0), b=c(MinSD, Mean, PlusSD))
?abline
abline(a=0, b=MinSD)
abline(a=0, b=MinSD, col="blue")
plot(x=NULL, y=NULL, xlim=c(-1,1), ylim=c(-1,1), xlab="W1", ylab="W2")
abline(a=0, b=MinSD, col="blue")
abline(a=0, b=Mean, col="red")
abline(a=0, b=PlusSD, col="green")
plot(x=NULL, y=NULL, xlim=c(-1,1), ylim=c(-1,1), xlab="W1", ylab="W2", main="Slope of W2W conditionally on Lag")
abline(a=0, b=MinSD, col="blue")
abline(a=0, b=Mean, col="red")
abline(a=0, b=PlusSD, col="green")
?legend
legend(-1, 1, c("-1 SD", "Mean", "+1 SD"), col=c("blue", "red", "green"))
legend(-1, 1, c("-1 SD", "Mean", "+1 SD"), col=c("blue", "red", "green"), lty=c(1,1,1))
plot(x=NULL, y=NULL, xlim=c(-1,1), ylim=c(-1,1), xlab="W1", ylab="W2", main="Slope of W2W conditional on Lag")
abline(a=0, b=MinSD, col="blue")
abline(a=0, b=Mean, col="red")
abline(a=0, b=PlusSD, col="green")
legend(-1, 1, c("-1 SD", "Mean", "+1 SD"), col=c("blue", "red", "green"), lty=c(1,1,1))
Nohe.miss <- Nohe.df
Nohe.miss$data$Lag[c(1, 2)] <- NA
head(Nohe.miss)
head(Nohe.miss$data)
## Fit the model with Lag as a moderator
fit3 <- osmasem(model.name="Lag as a moderator with NA", RAM=RAM1, Ax=A2, data=Nohe.miss)
## Fit the model with Lag as a moderator
fit3a <- osmasem(model.name="Lag as a moderator with NA", RAM=RAM1, Ax=A2, data=Nohe.miss)
summary(fit3a)
?osmasem
select.rows <- !is.na(Nohe.miss$data$Lag)
select.rows
## Fit the model with Lag as a moderator
fit3b <- osmasem(model.name="Lag as a moderator with NA", RAM=RAM1, Ax=A2, data=Nohe.miss, select.rows=select.rows)
Nohe.miss$data$Lag
select.rows <- c(!is.na(Nohe.miss$data$Lag))
select.rows
## Fit the model with Lag as a moderator
fit3b <- osmasem(model.name="Lag as a moderator with NA", RAM=RAM1, Ax=A2, data=Nohe.miss, select.rows=select.rows)
subset.rows <- c(!is.na(Nohe.miss$data$Lag))
subset.rows
## Fit the model with Lag as a moderator
fit3b <- osmasem(model.name="Lag as a moderator with NA", RAM=RAM1, Ax=A2, data=Nohe.miss, subset.rows=subset.rows)
summary(fit3b)
## Comparing the models with and without the covariate
anova(fit2, fit0)
summary(fit0)
anova(fit3b, fit0)
fit0.miss <- osmasem(model.name="No moderator but dropped data with NA in moderator", RAM=RAM1,
data=Nohe.df, subset.rows=subset.rows)
anova(fit3b, fit0.miss)
head(df)
head(df)
## Compute correlations corrected for unreliability
df$`W1-S2` <- with(df, `W1-S2`/sqrt(RelW1)/sqrt(RelS2))
head(df)
df$`W1-S2cor` <- with(df, `W1-S2`/sqrt(RelW1)/sqrt(RelS2))
df$`S1-W2cor` <- with(df, `S1-W2`/sqrt(RelS1)/sqrt(RelW2))
df$`W1-S1cor` <- with(df, `W1-S1`/sqrt(RelW1)/sqrt(RelS1))
df$`W2-S2cor` <- with(df, `W2-S2`/sqrt(RelW2)/sqrt(RelS2))
df$`W1-W2cor` <- with(df, `W1-W2`/sqrt(RelW1)/sqrt(RelW2))
df$`S1-S2cor` <- with(df, `S1-S2`/sqrt(RelS1)/sqrt(RelS2))
## Split each row as a list
my.list <- split(df, 1:nrow(df))
## Show the first list
my.list[[1]]
my.corcor <- lapply(my.list,
function(x) {## Use the names of the corrected correlations
mat <- vec2symMat(unlist(x[c("W1-S1cor","W1-W2cor","W1-S2cor","S1-W2cor","S1-S2cor","W2-S2cor")]),
diag = FALSE)
## Add the dimensions for ease of reference
dimnames(mat) <- list(my.var, my.var)
## Return the correlation matrix
mat})
## Add the study names for ease of reference
names(my.corcor) <- df$Study
rand1.cor <- tssem1(my.corcor, df$N, method="REM")
summary(rand1.cor)
rand2.cor <- tssem2(rand1.cor, RAM=RAM1)
summary(rand2.cor)
plot(rand2a, color="green", layout="spring")
layout(t(1:2))
## Plot the first group
plot(rand2a, col="green")
title("Uncorrected correlations")
## Plot the second group
plot(rand2.cor, col="yellow")
title("Corrected correlations")
?plot.character
layout(t(1:2))
## Plot the first group
plot(rand2a, col="green", layout="spring")
title("Uncorrected correlations")
## Plot the second group
plot(rand2.cor, col="yellow", layout="spring")
title("Corrected correlations")
layout(t(1:2))
## Plot the first group
plot(rand2a, col="green", layout="tree2")
title("Uncorrected correlations")
## Plot the second group
plot(rand2.cor, col="yellow", layout="tree2")
title("Corrected correlations")
layout(t(1:2))
## Plot the first group
plot(rand2a, col="green", layout="circle2")
title("Uncorrected correlations")
## Plot the second group
plot(rand2.cor, col="yellow", layout="circle2")
title("Corrected correlations")
layout(t(1:2))
## Plot the first group
plot(rand2a, col="green", layout="circle")
title("Uncorrected correlations")
## Plot the second group
plot(rand2.cor, col="yellow", layout="circle")
title("Corrected correlations")
layout(t(1:2))
## Plot the first group
plot(rand2a, col="green", layout="spring")
title("Uncorrected correlations")
## Plot the second group
plot(rand2.cor, col="yellow", layout="spring")
title("Corrected correlations")
layout(t(1:2))
## Plot the first group
plot(rand2a, col="green")
title("Uncorrected correlations")
## Plot the second group
plot(rand2.cor, col="yellow")
title("Corrected correlations")
## Read the SPSS dataset
my.df <- foreign::read.spss("Schutte21.sav", use.value.labels = TRUE, to.data.frame=TRUE)
## A function to convert rows into a 3x3 correlation matrix
create.matrix <- function(x, type=c(1, 2, 3)) {
mat <- matrix(NA, ncol=3, nrow=3)
diag(mat) <- 1
type <- as.character(type)
## Mindfulness, EI, Gratitude
## 1: Mindfulness and EI
## 2: Mindfulness and Gratitude
## 3: EI and Gratitude
switch(type,
"1" = mat[1, 2] <- mat[2, 1] <- unlist(x),
"2" = mat[1, 3] <- mat[3, 1] <- unlist(x),
"3" = mat[2, 3] <- mat[3, 2] <- unlist(x))
mat
}
varlist <- c("Mindfulness", "EI", "Gratitude")
my.cor <- lapply(split(my.df, seq(nrow(my.df))),
function(x, y) create.matrix(x["Effect_size"], x["Type_of_Association"]))
my.cor <- lapply(my.cor, function(x) {dimnames(x) <- list(varlist, varlist); x}  )
names(my.cor) <- my.df$Study_name
## Correlation matrices in the analysis
head(my.cor)
## Sample sizes
my.n <- my.df$N
my.n
## Number of studies in each cell
pattern.na(my.cor, show.na = FALSE)
## Total sample sizes in each cell
pattern.n(my.cor, my.n)
```
## Number of studies in each cell
pattern.na(my.cor, show.na = FALSE)
## Total sample sizes in each cell
pattern.n(my.cor, my.n)
stage1 <- tssem1(my.cor, my.n)
summary(stage1)
## Average correlation matrix
meanR <- vec2symMat(coef(stage1, select = "fixed"), diag = FALSE)
dimnames(meanR) <- list(varlist, varlist)
meanR
## Absolute heterogeneity variance: tau^2
tau2 <- vec2symMat(coef(stage1, select = "random"), diag = FALSE)
dimnames(tau2) <- list(varlist, varlist)
tau2
## Relative heterogeneity index: I^2
I2 <- vec2symMat(summary(stage1)$I2.values[, "Estimate"], diag = FALSE)
dimnames(I2) <- list(varlist, varlist)
I2
## Proposed model
model4 <- "Gratitude ~ c*Mindfulness + b*EI
EI ~ a*Mindfulness
Mindfulness ~~ 1*Mindfulness
## Define direct and indirect effects
Direct := c
Indirect := a*b"
plot(model4, color="yellow")
RAM5 <- lavaan2RAM(model4, obs.variables = varlist)
RAM4
RAM4 <- lavaan2RAM(model4, obs.variables = varlist)
RAM4
stage2 <- tssem2(stage1, RAM=RAM4, intervals.type = "LB")
summary(stage2)
plot(stage2, color="yellow")
model4 <- "Gratitude ~ c*Mindfulness + b*EI
EI ~ a*Mindfulness
Mindfulness ~~ 1*Mindfulness
## Define direct and indirect effects
Direct := c
Indirect := a*b
c == a*b"
RAM4 <- lavaan2RAM(model4, obs.variables = varlist)
stage2 <- tssem2(stage1, RAM=RAM4, intervals.type = "LB")
summary(stage2)
0.401476* 0.108698
0.401476* 0.270746
library(metaSEM)
## Read the SPSS dataset
my.df <- foreign::read.spss("Schutte21.sav", use.value.labels = TRUE, to.data.frame=TRUE)
View(my.df)
## Read the SPSS dataset
my.df <- foreign::read.spss("Schutte21.sav", use.value.labels = TRUE, to.data.frame=TRUE)
## A function to convert rows into a 3x3 correlation matrix
create.matrix <- function(x, type=c(1, 2, 3)) {
mat <- matrix(NA, ncol=3, nrow=3)
diag(mat) <- 1
type <- as.character(type)
## Mindfulness, EI, Gratitude
## 1: Mindfulness and EI
## 2: Mindfulness and Gratitude
## 3: EI and Gratitude
switch(type,
"1" = mat[1, 2] <- mat[2, 1] <- unlist(x),
"2" = mat[1, 3] <- mat[3, 1] <- unlist(x),
"3" = mat[2, 3] <- mat[3, 2] <- unlist(x))
mat
}
varlist <- c("Mindfulness", "EI", "Gratitude")
my.cor <- lapply(split(my.df, seq(nrow(my.df))),
function(x, y) create.matrix(x["Effect_size"], x["Type_of_Association"]))
my.cor <- lapply(my.cor, function(x) {dimnames(x) <- list(varlist, varlist); x}  )
names(my.cor) <- my.df$Study_name
## Correlation matrices in the analysis
head(my.cor)
## Sample sizes
my.n <- my.df$N
my.n
## Number of studies in each cell
pattern.na(my.cor, show.na = FALSE)
## Total sample sizes in each cell
pattern.n(my.cor, my.n)
hist(my.n)
model5 <- "Gratitude ~ c*Mindfulness + b*EI
EI ~ a*Mindfulness
Mindfulness ~~ 1*Mindfulness
## Define direct and indirect effects
Direct := c
Indirect := a*b
c == a*b        ## Add a constraint to ensure c = a*b
"
RAM5 <- lavaan2RAM(model5, obs.variables = varlist)
RAM5
stage2 <- tssem2(stage1, RAM=RAM5, intervals.type = "LB")
## Stage 1 analysis: find an average correlation matrix
stage1 <- tssem1(my.cor, my.n, method="REM")
## Stage 2 analysis: fit the path model
## Indirect = a*b
## Direct = c
## Likelihood-based CI: intervals.type = "LB"
stage2 <- tssem2(stage1, RAM=RAM5, intervals.type = "LB")
mxEVal(c-a*b, stage2$mx.fit)
mxEval(c-a*b, stage2$mx.fit)
## Compare the models with and without c=a*b
anova(stage2, stage2b)
## Stage 2 analysis: fit the path model
## Indirect = a*b
## Direct = c
## Likelihood-based CI: intervals.type = "LB"
stage2 <- tssem2(stage1, RAM=RAM4, intervals.type = "LB")
odel4 <- "Gratitude ~ c*Mindfulness + b*EI
EI ~ a*Mindfulness
Mindfulness ~~ 1*Mindfulness
## Define direct and indirect effects
Direct := c
Indirect := a*b"
plot(model4, color="yellow")
model4 <- "Gratitude ~ c*Mindfulness + b*EI
EI ~ a*Mindfulness
Mindfulness ~~ 1*Mindfulness
## Define direct and indirect effects
Direct := c
Indirect := a*b"
plot(model4, color="yellow")
RAM4 <- lavaan2RAM(model4, obs.variables = varlist)
RAM4
## Stage 2 analysis: fit the path model
## Indirect = a*b
## Direct = c
## Likelihood-based CI: intervals.type = "LB"
stage2 <- tssem2(stage1, RAM=RAM4, intervals.type = "LB")
stage2b <- tssem2(stage1, RAM=RAM5, intervals.type = "LB")
summary(stage2)
## Let's check if c = a*b
mxEval(c-a*b, stage2b$mx.fit)
## Compare the models with and without c=a*b
anova(stage2, stage2b)
parallel::detectCores()
## Show how many cores in my computer
parallel::detectCores()
# TSSEM
## Stage 1 TSSEM with random-effects model
rand1 <- tssem1(Digman97$data, Digman97$n, method="REM")
summary(rand1)
## Stage 2 TSSEM
## Suppose we only want to fit a one-factor model with 3 variables for illustration.
model <- "## One-factor model with 3 indicators
Alpha=~A+C+ES"
plot(model)
RAM <- lavaan2RAM(model, obs.variables=c("A","C","ES"))
RAM
rand2 <- tssem2(rand1, RAM=RAM, subset.variables=c("A","C","ES"))
summary(rand2)
df <- Cor2DataFrame(Digman97)
## Use subset.variables to include variables in the analysis
osmasem.fit <- osmasem(RAM=RAM, data=df, subset.variables=c("A","C","ES"))
summary(osmasem.fit)
plot(osmasem.fit, color="yellow")
