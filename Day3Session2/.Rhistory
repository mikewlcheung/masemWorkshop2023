?load
load("Hagger18.Rdata")
View(Hagger18)
library(metaSEM)
## Read the SPSS dataset
my.df <- foreign::read.spss("Schutte21.sav", use.value.labels = TRUE, to.data.frame=TRUE)
head(my.df)
my.df$Effect_size
my.df$Type_of_Association
my.df$Type_of_Association==1
as.character(my.df$Type_of_Association)
x <- my.df[[1]]
x
x <- my.df[1, ]
x
create.matrix <- function(x, type=c(1, 2, 3)) {
mat <- matrix(NA, ncol=3, nrow=3)
diag(mat) <- 1
type <- as.character(type)
## Mindfulness, EI, Gratitude
## 1: Mindfulness and EI
## 2: Mindfulness and Gratitude
## 3: EI and Gratitude
switch(type,
"1" = mat[1, 2] <- mat[2, 1] <- unlist(x),
"2" = mat[1, 3] <- mat[3, 1] <- unlist(x),
"3" = mat[2, 3] <- mat[3, 2] <- unlist(x))
mat
}
create.matrix(x["Effect_size"], x["Type_of_Association"])
x["Type_of_Association"]
as.character(x["Type_of_Association"])
level(x$Type_of_Association)
levels(x$Type_of_Association)
as.character(x$Type_of_Association)
my.cor <- lapply(split(my.df, seq(nrow(my.df))),
function(x) create.matrix(x["Effect_size"], x["Type_of_Association"]))
my.cor
install.packages("openxlsx")
librar(openxlsx)
library(openxlsx)
write.xlsx(my.df, file="Schutte21.xlsx")
my.df$Study_name
trimws(my.df$Study_name)
my.df$Study_name = trimws(my.df$Study_name)
write.xlsx(my.df, file="Schutte21.xlsx")
## Read the study characteristics
my.df <- read_xlsx("Schutte21.xlsx", sheet="Sheet 1")
library(readxl)
## Read the study characteristics
my.df <- read_xlsx("Schutte21.xlsx", sheet="Sheet 1")
head(my.df)
x = my.df[1,]
x["Effect_size"]
x["Type_of_Association"]
as.character(x["Type_of_Association"])
table(my.df$Type_of_Association)
## A function to convert rows into a 3x3 correlation matrix
create.matrix <- function(x, type=c("mindfulness and emotional intelligence",
"mindfulness and gratitude",
"emotional intelligence and gratitude")) {
mat <- matrix(NA, ncol=3, nrow=3)
diag(mat) <- 1
type <- match(type)
## Mindfulness, EI, Gratitude
## 1: Mindfulness and EI
## 2: Mindfulness and Gratitude
## 3: EI and Gratitude
switch(type,
"mindfulness and emotional intelligence" = mat[1, 2] <- mat[2, 1] <- unlist(x),
"mindfulness and gratitude" = mat[1, 3] <- mat[3, 1] <- unlist(x),
"emotional intelligence and gratitude" = mat[2, 3] <- mat[3, 2] <- unlist(x))
mat
}
varlist <- c("Mindfulness", "EI", "Gratitude")
my.cor <- lapply(split(my.df, seq(nrow(my.df))),
function(x) create.matrix(x["Effect_size"], x["Type_of_Association"]))
?match
create.matrix <- function(x, type=c("mindfulness and emotional intelligence",
"mindfulness and gratitude",
"emotional intelligence and gratitude")) {
mat <- matrix(NA, ncol=3, nrow=3)
diag(mat) <- 1
type <- match(type,
c("mindfulness and emotional intelligence",
"mindfulness and gratitude",
"emotional intelligence and gratitude"))
## Mindfulness, EI, Gratitude
## 1: Mindfulness and EI
## 2: Mindfulness and Gratitude
## 3: EI and Gratitude
switch(type,
"mindfulness and emotional intelligence" = mat[1, 2] <- mat[2, 1] <- unlist(x),
"mindfulness and gratitude" = mat[1, 3] <- mat[3, 1] <- unlist(x),
"emotional intelligence and gratitude" = mat[2, 3] <- mat[3, 2] <- unlist(x))
mat
}
varlist <- c("Mindfulness", "EI", "Gratitude")
my.cor <- lapply(split(my.df, seq(nrow(my.df))),
function(x) create.matrix(x["Effect_size"], x["Type_of_Association"]))
my.cor
my.cor <- lapply(my.cor, function(x) {dimnames(x) <- list(varlist, varlist); x}  )
names(my.cor) <- my.df$Study_name
## Correlation matrices in the analysis
head(my.cor)
## Number of studies in each cell
pattern.na(my.cor, show.na = FALSE)
## Total sample sizes in each cell
pattern.n(my.cor, my.n)
my.n <- my.df$N
hist(my.n)
## Total sample sizes in each cell
pattern.n(my.cor, my.n)
Hagger18
head(Hagger18)
## Calculate the indirect and direct effects and their sampling covariance matrices
## The variables are arranged as outcome, mediator, and predictor.
Indirect.eff <- indirectEffect(Hagger18$data, Hagger18$n)
head(Indirect.eff)
## Add behavior frequency to the data
Indirect.eff <- data.frame(Indirect.eff, beh_freq_high=Hagger18$beh_freq_high)
## Show the first few studies
head(Indirect.eff
)
IE0 <- meta(y=cbind(ind_eff, dir_eff),
v=cbind(ind_var, ind_dir_cov, dir_var),
data=Indirect.eff,
model.name = "Random")
summary(IE0)
## Variance-covariance matrix of the random effects
VarCorr(IE0)
## Correlation matrix of the random effects
cov2cor(VarCorr(IE0))
## Plot the effect sizes
plot(IE0, axis.labels = c("Indirect effect", "Direct effect"))
## Mixed-effects model with behavior frequency as a moderator
IE1 <- meta(y=cbind(ind_eff, dir_eff),
v=cbind(ind_var, ind_dir_cov, dir_var),
x=beh_freq_high,
data=Indirect.eff,
model.name = "Moderator_beh")
summary(IE1)
## Test the statistical significance between the models
anova(IE1, IE0)
model <- "Beh ~ b*Int + c*PB
Int ~ a*PB
PB ~~ 1*PB
## Indirect effect
Ind := a*b
Dir := c
"
## Calculate the indirect and direct effects and their sampling covariance matrices
calEffSizes(model=model, data=Hagger18)
Hagger18
## Calculate the indirect and direct effects and their sampling covariance matrices
calEffSizes(model=model, Cov=Hagger18$data[[1]], n=Hagger18$n[1])
## The variables are arranged as outcome, mediator, and predictor.
Indirect.eff <- indirectEffect(Hagger18$data, Hagger18$n)
head(Indirect.eff)
model <- "Beh ~ b*Int + c*PB
Int ~ a*PB
PB ~~ PB"
## Calculate the indirect and direct effects and their sampling covariance matrices
calEffSizes(model=model, Cov=Hagger18$data[[1]], n=Hagger18$n[1])
model <- "Beh ~ b*Int + c*PB
Int ~ a*PB
PB ~~ PB
Ind := a*b
Dir := c"
=
## Calculate the indirect and direct effects and their sampling covariance matrices
calEffSizes(model=model, Cov=Hagger18$data[[1]], n=Hagger18$n[1])
?indirectEffect
head(Hagger18)
model <- "Beh ~ b*Int + c*PB
Int ~ a*PB"
load("Hagger18.Rdata")
library(metaSEM)
asyCovOld
mapply
?calEffSizes
mapply(calEffSizes, data=Hagger18$data, n=Hagger18$n, MoreArgs=list(model=model))
mapply(calEffSizes, Cov=Hagger18$data, n=Hagger18$n, MoreArgs=list(model=model))
?mapply
Hagger18$data
Hagger18$n
mapply(calEffSizes, Cov=Hagger18$data, n=Hagger18$n, MoreArgs=list(model=model))
mapply(calEffSizes, Cov=list(Hagger18$data), n=Hagger18$n, MoreArgs=list(model=model))
?calEffSizes
calEffSizes(model, Cov=Hagger18$data[[1]], n=Hagger18$n[1])
Hagger18$data[[1]]
Hagger18$n[1]
model <- "Beh ~ b*Int + c*PB
Int ~ a*PB"
PB ~~ 1*PB
Ind := a*b
model <- "Beh ~ b*Int + c*PB
Int ~ a*PB
Ind := a*b
Dir := c"
mapply(calEffSizes, Cov=Hagger18$data, n=Hagger18$n, MoreArgs=list(model=model))
a <- mapply(calEffSizes, Cov=Hagger18$data, n=Hagger18$n, MoreArgs=list(model=model), SIMPLIFY = FALSE)
a
