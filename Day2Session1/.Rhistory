library(metaSEM)
## Load the library to read XLSX file
library(readxl)
## Read the study characteristics
study <- read_xlsx("Digman97.xlsx", sheet="Info")
## Display a few studies
head(study)
## Create an empty list to store the correlation matrices
Digman97.data <- list()
## Read 1 to 14 correlation matrices
for (i in 1:14) {
## Read each sheet and convert it into a matrix
mat <- as.matrix(read_xlsx("Digman97.xlsx", sheet=paste0("Study ", i)))
## Add the row names
rownames(mat) <- colnames(mat)
## Save it into a list
Digman97.data[[i]] <- mat
}
## Add the names of the studies
names(Digman97.data) <- study$Study
model1 <- "## Factor loadings
## Alpha is measured by A, C, and ES
Alpha =~ A + C + ES
## Beta is measured by E and I
Beta =~ E + I
## Factor correlation between Alpha and Beta
Alpha ~~ Beta"
## Display the model
plot(model1, color="yellow")
## Convert the lavaan syntax into a RAM model as the metaSEM only knows the RAM model
## It is important to ensure that the variables are arranged in A, C, ES, E, and I.
RAM1 <- lavaan2RAM(model1, obs.variables=c("A","C","ES","E","I"),
A.notation = "on", S.notation = "with")
RAM1
## method="REM": Random-effects model
random1 <- tssem1(Digman97.data, Digman97.n, method="REM", RE.type="Diag")
## Extract the sample sizes
Digman97.n <- study$n
Digman97.n
## method="REM": Random-effects model
random1 <- tssem1(Digman97.data, Digman97.n, method="REM", RE.type="Diag")
random2a <- tssem2(random1, RAM=RAM1)
summary(random2a)
## Plot the parameter estimates
plot(random2a, color="green")
summary(random2a)
model2 <- "## Factor loadings
## Alpha is measured by A, C, and ES
Alpha =~ alpha*A + alpha*C + alpha*ES
## Beta is measured by E and I
Beta =~ beta*E + beta*I
## Factor correlation between Alpha and Beta
Alpha ~~ Beta"
## Display the model
plot(model2, color="yellow")
RAM2 <- lavaan2RAM(model1, obs.variables=c("A","C","ES","E","I"),
A.notation = "on", S.notation = "with")
RAM2
##
random2b <- tssem2(random1, RAM=RAM2)
summary(random2b)
RAM2
RAM2 <- lavaan2RAM(model2, obs.variables=c("A","C","ES","E","I"),
A.notation = "on", S.notation = "with")
RAM2
##
random2b <- tssem2(random1, RAM=RAM2)
summary(random2b)
## Plot the parameter estimates
plot(random2b, color="green")
anova(random2a, random2b)
## Read the SPSS dataset
my.df <- foreign::read.spss("Schutte21.sav", use.value.labels = TRUE, to.data.frame=TRUE)
## A function to convert rows into a 3x3 correlation matrix
create.matrix <- function(x, type=c(1, 2, 3)) {
mat <- matrix(NA, ncol=3, nrow=3)
diag(mat) <- 1
type <- as.character(type)
## Mindfulness, EI, Gratitude
## 1: Mindfulness and EI
## 2: Mindfulness and Gratitude
## 3: EI and Gratitude
switch(type,
"1" = mat[1, 2] <- mat[2, 1] <- unlist(x),
"2" = mat[1, 3] <- mat[3, 1] <- unlist(x),
"3" = mat[2, 3] <- mat[3, 2] <- unlist(x))
mat
}
varlist <- c("Mindfulness", "EI", "Gratitude")
my.cor <- lapply(split(my.df, seq(nrow(my.df))),
function(x, y) create.matrix(x["Effect_size"], x["Type_of_Association"]))
my.cor <- lapply(my.cor, function(x) {dimnames(x) <- list(varlist, varlist); x}  )
names(my.cor) <- my.df$Study_name
## Correlation matrices in the analysis
head(my.cor)
## Sample sizes
my.n <- my.df$N
my.n
stage1 <- tssem1(my.cor, my.n)
summary(stage1)
## Average correlation matrix
meanR <- vec2symMat(coef(stage1, select = "fixed"), diag = FALSE)
dimnames(meanR) <- list(varlist, varlist)
meanR
## Absolute heterogeneity variance: tau^2
tau2 <- vec2symMat(coef(stage1, select = "random"), diag = FALSE)
dimnames(tau2) <- list(varlist, varlist)
tau2
## Relative heterogeneity index: I^2
I2 <- vec2symMat(summary(stage1)$I2.values[, "Estimate"], diag = FALSE)
dimnames(I2) <- list(varlist, varlist)
I2
model5 <- "Gratitude ~ c*Mindfulness + b*EI
EI ~ a*Mindfulness
Mindfulness ~~ 1*Mindfulness
Indirect := a*b"
plot(model5, color="yellow")
RAM5 <- lavaan2RAM(model5, obs.variables = varlist)
RAM5
## Stage 2 analysis: fit the path model
## Indirect = a*b
## Direct = c
## Likelihood-based CI: intervals.type = "LB"
stage2 <- tssem2(stage1, RAM=RAM5, intervals.type = "LB")
summary(stage2)
model5 <- "Gratitude ~ c*Mindfulness + b*EI
EI ~ a*Mindfulness
Mindfulness ~~ 1*Mindfulness
## Define direct and indirect effects
Direct := c
Indirect := a*b"
plot(model5, color="yellow")
RAM5 <- lavaan2RAM(model5, obs.variables = varlist)
RAM5
## Stage 2 analysis: fit the path model
## Indirect = a*b
## Direct = c
## Likelihood-based CI: intervals.type = "LB"
stage2 <- tssem2(stage1, RAM=RAM5, intervals.type = "LB")
summary(stage2)
library(metaSEM)
model3 <- "W2 ~ w2w*W1 + s2w*S1    # path coefficeients
S2 ~ s2s*S1 + w2s*W1
S1 ~~ w1withs1*W1       # correlation
S2 ~~ w2withs2*W2
W1 ~~ 1*W1              # variances of the independent variables are fixed at 1
S1 ~~ 1*S1"
my.var=c("W1", "S1", "W2", "S2"
)
RAM3 <- lavaan2RAM(model3, obs.variables = my.var)
RAM3
rand1 <- tssem1(Nohe15A1$data, Nohe15A1$N, method="REM")
rand1 <- tssem1(Nohe15A1$data, Nohe15A1$n, method="REM")
summary(rand1)
library(metaSEM)
## Read the SPSS dataset
my.df <- foreign::read.spss("Schutte21.sav", use.value.labels = TRUE, to.data.frame=TRUE)
## A function to convert rows into a 3x3 correlation matrix
create.matrix <- function(x, type=c(1, 2, 3)) {
mat <- matrix(NA, ncol=3, nrow=3)
diag(mat) <- 1
type <- as.character(type)
## Mindfulness, EI, Gratitude
## 1: Mindfulness and EI
## 2: Mindfulness and Gratitude
## 3: EI and Gratitude
switch(type,
"1" = mat[1, 2] <- mat[2, 1] <- unlist(x),
"2" = mat[1, 3] <- mat[3, 1] <- unlist(x),
"3" = mat[2, 3] <- mat[3, 2] <- unlist(x))
mat
}
varlist <- c("Mindfulness", "EI", "Gratitude")
my.cor <- lapply(split(my.df, seq(nrow(my.df))),
function(x, y) create.matrix(x["Effect_size"], x["Type_of_Association"]))
my.cor <- lapply(my.cor, function(x) {dimnames(x) <- list(varlist, varlist); x}  )
names(my.cor) <- my.df$Study_name
## Correlation matrices in the analysis
head(my.cor)
## Sample sizes
my.n <- my.df$N
my.n
## Number of studies in each cell
pattern.na(my.cor, show.na = FALSE)
## Total sample sizes in each cell
pattern.n(my.cor, my.n)
## Stage 1 analysis: find an average correlation matrix
stage1 <- tssem1(my.cor, my.n)
model5 <- "Gratitude ~ c*Mindfulness + b*EI
EI ~ a*Mindfulness
Mindfulness ~~ 1*Mindfulness
## Define direct and indirect effects
Direct := c
Indirect := a*b"
plot(model5, color="yellow")
RAM5 <- lavaan2RAM(model5, obs.variables = varlist)
RAM5
## Stage 2 analysis: fit the path model
## Indirect = a*b
## Direct = c
## Likelihood-based CI: intervals.type = "LB"
stage2 <- tssem2(stage1, RAM=RAM5, intervals.type = "LB")
summary(stage2)
stage2b <- tssem2(stage1, RAM=RAM5, intervals.type = "LB",
mx.algebras = list(Indirect=mxAlgebra(a*b, name="Indirect"),
Direct=mxAlgebra(c, name="Direct")),
run=FALSE)
## Add a constraint on c=a*b
## Rerun to remove errors
stage2b <- mxModel(stage2b, mxConstraint(c==a*b, name="constraint"))
stage2b <- mxRun(stage2b)
## Warning message in the results
summary(stage2b)
## Rerun it to remove the errors
stage2b <- mxTryHard(stage2b, extraTries = 100)
stage2b <- mxRun(stage2b, intervals = TRUE)
## It looks okay now.
summary(stage2b)
## Compare the models with and without c=a*b
anova(stage2$mx.fit, stage2b)
?wls
stage2b <- tssem2(stage1, RAM=RAM5, intervals.type = "LB",
mx.algebras = list(Indirect=mxAlgebra(a*b, name="Indirect"),
Direct=mxAlgebra(c, name="Direct")),
mxModel.Args = list(mxConstraint(c==a*b, name="constraint")))
summary(stage2b)
0.338588*0.215989
mxEval(constraint, stage2b$mx.fit)
stage2b <- tssem2(stage1, RAM=RAM5, intervals.type = "LB",
mx.algebras = list(Indirect=mxAlgebra(a*b, name="Indirect"),
Direct=mxAlgebra(c, name="Direct")),
mxModel.Args = list(constraint=mxConstraint(c==a*b, name="constraint")))
mxEval(constraint, stage2b$mx.fit)
stage2b$mx.fit$constraint
summary(stage2b)
stage2b <- tssem2(stage1, RAM=RAM5, intervals.type = "LB",
mx.algebras = list(Indirect=mxAlgebra(a*b, name="Indirect"),
Direct=mxAlgebra(c, name="Direct")),
run=FALSE)
stage2b <- mxModel(stage2b, mxConstraint(c==a*b, name="constraint"))
stage2b <- mxRun(stage2b)
## Warning message in the results
summary(stage2b)
0.4014759*0.1086980
0.4014759*0.2707460
stage2b <- tssem2(stage1, RAM=RAM5, intervals.type = "LB",
mx.algebras = list(Indirect=mxAlgebra(a*b, name="Indirect"),
Direct=mxAlgebra(c, name="Direct")),
mxModel.Args = list(constraint=mxConstraint(c==a*b, name="constraint")))
summary(stage2b)
list(mxConstraint(c==a*b, name="constraint"))
stage2b <- tssem2(stage1, RAM=RAM5, intervals.type = "LB",
mx.algebras = list(Indirect=mxAlgebra(a*b, name="Indirect"),
Direct=mxAlgebra(c, name="Direct")),
mxModel.Args = list(mxConstraint(c==a*b, name="constraint")))
summary(stage2b)
stage2b <- tssem2(stage1, RAM=RAM5, intervals.type = "LB",
mx.algebras = list(Indirect=mxAlgebra(a*b, name="Indirect"),
Direct=mxAlgebra(c, name="Direct")))
summary(stage2b)
stage2b <- tssem2(stage1, RAM=RAM5, intervals.type = "LB",
mx.algebras = list(Indirect=mxAlgebra(a*b, name="Indirect"),
Direct=mxAlgebra(c, name="Direct")),
run=FALSE)
stage2b <- mxModel(stage2b, mxConstraint(c==a*b, name="constraint"))
stage2b <- mxRun(stage2b)
## Warning message in the results
summary(stage2b)
stage2b <- tssem2(stage1, RAM=RAM5, intervals.type = "LB",
mx.algebras = list(Indirect=mxAlgebra(a*b, name="Indirect"),
Direct=mxAlgebra(c, name="Direct")),
mxModel.Args = list(mxConstraint(c==a*b, name="constraint")))
## It looks okay now.
summary(stage2b)
0.401476*0.270746
stage2b <- tssem2(stage1, RAM=RAM5, intervals.type = "LB",
mx.algebras = list(Indirect=mxAlgebra(a*b, name="Indirect"),
Direct=mxAlgebra(c, name="Direct")),
mxModel.Args = list(mxConstraint(c==a*b, name="constraint")))
## Warning message in the results
summary(stage2b)
stage2 <- tssem2(stage1, RAM=RAM5, intervals.type = "LB")
summary(stage2)
## Compare the models with and without c=a*b
anova(stage2$mx.fit, stage2b)
## Compare the models with and without c=a*b
anova(stage2, stage2b)
stage2b <- tssem2(stage1, RAM=RAM5, intervals.type = "LB",
#mx.algebras = list(Indirect=mxAlgebra(a*b, name="Indirect"),
#                   Direct=mxAlgebra(c, name="Direct")),
mxModel.Args = list(mxConstraint(c==a*b, name="constraint")))
## The estimated direct and indirect effects are identical.
summary(stage2b)
library(symSEM)
cfa <- "f =~ a*x1 + b*x2 + c*x3 + d*x4
f ~~ 1*f    ## Fix the factor variance at 1 for identification
"
plot(cfa)
cfa <- "f =~ a*x1 + b*x2 + c*x3 + d*x4
f ~~ 1*f      ## Fix the factor variance at 1 for identification
x1 ~~ e11*x1  ## Label the error variances for ease of reading
x2 ~~ e22*x2
x3 ~~ e33*x3
x4 ~~ e44*x4
"
plot(cfa, color="yellow")
## Convert it to RAM specification
RAM <- lavaan2RAM(cfa, obs.variables=c("x1", "x2", "x3", "x4"))
RAM
library(metaSEM)
## Convert it to RAM specification
RAM <- lavaan2RAM(cfa, obs.variables=c("x1", "x2", "x3", "x4"))
RAM
impliedS(RAM, corr=FALSE)
impliedS(RAM, corr=TRUE)
cfa <- "f =~ a*x1 + b*x2 + c*x3
f ~~ 1*f      ## Fix the factor variance at 1 for identification
x1 ~~ e11*x1  ## Label the error variances for ease of reading
x2 ~~ e22*x2
x3 ~~ e33*x3
"
## Plot the model
plot(cfa, color="yellow")
## Convert it to RAM specification
RAM <- lavaan2RAM(cfa, obs.variables=c("x1", "x2", "x3"))
RAM
impliedS(RAM, corr=FALSE)
## Print the model-implied correlation matrix
impliedS(RAM, corr=TRUE)
as.numeric(" 13.4")
as.numeric(" 13.4 ")
?as.numeric
x <- c(10.1, 23.4, "2.1 ", " 3.4")
x
## Convert it to numeric
as.numeric(x)
library(metaSEM)
## Load the library to read XLSX file
library(readxl)
## Read the study characteristics
study <- read_xlsx("Digman97.xlsx", sheet="Info")
x <- seq(-4, 4, length=100)
#create a vector of values that shows the height of the probability distribution
#for each value in x
y <- dnorm(x)
#plot x and y as a scatterplot with connected lines (type = "l") and add
#an x-axis with custom labels
plot(x,y, type = "l", lwd = 2, axes = FALSE, xlab = "", ylab = "")
lcb <- ((mean_sim - (3 * std_sim)) - 5)
lcb <- ((mean_sim - (3 * std_sim)) - 5)
library(ggplot2)
ggplot(data.frame(x = c(0, 1)), aes(x = x)) +
stat_function(fun = dnorm, args = list(0.2, 0.1)) +
stat_function(fun = dnorm, args = list(0.7, 0.05))
ggplot(data.frame(x = c(0, 1)), aes(x = x)) +
stat_function(fun = dnorm, args = list(0, 0.1)) +
stat_function(fun = dnorm, args = list(0, 0.5))
ggplot(data.frame(x = c(-1, 1)), aes(x = x)) +
stat_function(fun = dnorm, args = list(0, 0.1)) +
stat_function(fun = dnorm, args = list(0, 0.5))
ggplot(data.frame(x = c(-1, 1)), aes(x = x)) +
stat_function(fun = dnorm, args = list(0, 0.1), col="red") +
stat_function(fun = dnorm, args = list(0, 0.5))
ggplot(data.frame(x = c(-1, 1)), aes(x = x)) +
stat_function(fun = dnorm, args = list(0, 0.1), col="red") +
stat_function(fun = dnorm, args = list(0, 0.5), col="green")
ggplot(data.frame(x = c(-1, 1)), aes(x = x)) +
stat_function(fun = dnorm, args = list(0, 0.1), col="red") +
stat_function(fun = dnorm, args = list(0, 0.5), col="blue")
ggplot(data.frame(x = c(-1, 1)), aes(x = x)) +
stat_function(fun = dnorm, args = list(0, 0.1), col="red") +
stat_function(fun = dnorm, args = list(0, 0.2), col="blue")
ggplot(data.frame(x = c(-1, 1)), aes(x = x)) +
stat_function(fun = dnorm, args = list(0, 0.1), col="red") +
stat_function(fun = dnorm, args = list(0, 0.2), col="blue")
library(metaSEM)
?plot.character
## Stage 1 analysis
random1 <- tssem1(Digman97$data, Digman97$n, method="REM", RE.type="Diag")
## Model with correlated factors
model1 <- "## Factor loadings
## Alpha is measured by A, C, and ES
Alpha =~ A + C + ES
## Beta is measured by E and I
Beta =~ E + I
## Factor correlation between Alpha and Beta
Alpha ~~ Beta"
RAM1 <- lavaan2RAM(model1, obs.variables=c("A","C","ES","E","I"),
A.notation = "on", S.notation = "with")
RAM1
## Display the model
plot(model1, color="yellow")
random2 <- tssem2(random1, RAM=RAM1)
summary(random2)
model2 <- "## Factor loadings
## Alpha is measured by A, C, and ES
Alpha =~ A + C + ES
## Beta is measured by E and I
Beta =~ E + I
## Factor correlation between Alpha and Beta fixed at 0
Alpha ~~ 0*Beta"
## Display the model
plot(model2, color="yellow")
RAM2 <- lavaan2RAM(model2, obs.variables=c("A","C","ES","E","I"),
A.notation = "on", S.notation = "with")
RAM2
random2a <- tssem2(random1, RAM=RAM2)
summary(random2a)
random2a <- rerun(random2a)
summary(random2a)
o
## Plot the parameter estimates
plot(random2a, color="green")
## Comparing them with a chi-square statistic
anova(random2, random2a)
model3 <- "## Factor loadings
g =~ A + C + ES + E + I"
## Display the model
plot(model3, color="yellow")
RAM3 <- lavaan2RAM(model3, obs.variables=c("A","C","ES","E","I"),
A.notation = "on", S.notation = "with")
RAM3
random2b <- tssem2(random1, RAM=RAM3)
summary(random2b)
## Plot the parameter estimates
plot(random2b, color="green")
## Comparing them with a chi-square statistic
anova(random2, random2b)
model4 <- "## Factor loadings
## Alpha is measured by A, C, and ES
Alpha =~ alpha*A + alpha*C + alpha*ES
## Beta is measured by E and I
Beta =~ beta*E + beta*I
## Factor correlation between Alpha and Beta
Alpha ~~ Beta"
## Display the model
plot(model4, color="yellow")
RAM4 <- lavaan2RAM(model4, obs.variables=c("A","C","ES","E","I"),
A.notation = "on", S.notation = "with")
RAM4
##
random2c <- tssem2(random1, RAM=RAM4)
summary(random2c)
## Plot the parameter estimates
plot(random2c, color="green")
## Comparing them with a chi-square statistic
anova(random2, random2c)
library(readxl)
library(metaSEM)
## Read the Excel file
df <- read_xlsx("Nohe15.xlsx", sheet="Table A1")
model1 <- "W2 ~ w2w*W1 + s2w*S1    # path coefficients
S2 ~ s2s*S1 + w2s*W1
S1 ~~ w1withs1*W1       # correlation
S2 ~~ w2withs2*W2
W1 ~~ 1*W1              # variances of the independent variables are fixed at 1
S1 ~~ 1*S1"
## Display the model
## See the layout argument in ?semPaths
## layout can be either tree, circle, spring, tree2, or circle2
plot(model1, color="yellow", layout="spring")
## Convert the above model to the RAM specification used by metaSEM.
## We also have to specify how the variables are arranged in the data.
RAM1 <- lavaan2RAM(model1, obs.variables = my.var)
A1 <- create.modMatrix(RAM=RAM1, output="A", mod="Pub")
A1
## Show how many cores are in my computer
parallel::detectCores()
?rerun
?tssem1
?osmasem
?save
## x is a string vector
x <- c(10.1, 23.4, "2.1 ", " 3.4", "\t4.2", "3.1\n")
x
## Convert it to numeric
as.numeric(x)
is.numeric(x)
is.character(x)
## Convert it to numeric
y <- as.numeric(x)
y
is.numeric(y)
